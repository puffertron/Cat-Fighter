
šq
ÌC-- player.script
local rendercam = require "rendercam.rendercam"
-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- the acceleration to move right/left
local move_acceleration = 1200
-- acceleration factor to use when air-borne
local air_acceleration_factor = 0.8
-- max speed right/left
local max_speed = 300
-- gravity pulling the player down in pixel units
local gravity = -900
local wall_slide_speed = -500
-- take-off speed when jumping in pixel units
local jump_takeoff_speed = 350
local wall_jump_takeoff_speed = 325
local wall_cooldown


-- pre-hashing ids improves performance
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local msg_raycast_miss = hash("ray_cast_missed")
local msg_raycast_hit = hash("ray_cast_response")

local group_obstacle = hash("default")
local group_kill = hash("autokill")
local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")
local anim_run = hash("walk")
local anim_idle = hash("idle")
local anim_jump = hash("jump")
local anim_fall = hash("fall")
local anim_spin = hash("spin_fall")
local anim_punch = hash("punch")
local anim_wall_turn = hash("wall_turn")
local anim_wall_slide = hash("wall_slide")

function init(self)
	self.go_id = go.get_id()
	local id_table = {id = self.go_id}
	-- this lets us handle input in this script
	msg.post(".", "acquire_input_focus")
	msg.post("/input_handler#input", "cat_id", id_table)

	-- initial player velocity
	self.velocity = vmath.vector3(0, 0, 0)
	-- support variable to keep track of collisions and separation
	self.correction = vmath.vector3()
	-- if the player stands on ground or not
	self.ground_contact = false
	-- movement input in the range [-1,1]
	self.move_input = 0
	-- the currently playing animation
	self.anim = nil
	-- timer that controls the jump-window when using mouse/touch
	self.touch_jump_timer = 0
	self.dir = 1
	self.jump = 0
	self.double_jumping = false
	self.wall_jumping = false
	self.wall_contact = false
	self.wall_near = false
	self.ground_near = false
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		msg.post("#cat", "play_animation", {id = anim})
		-- remember which animation is playing
		self.anim = anim
	end
end

local function update_animations(self)
	-- make sure the player character faces the right way
	sprite.set_hflip("#cat", self.dir < 0)
	-- make sure the right animation is playing
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, anim_idle)
		else
			play_animation(self, anim_run)
		end
	else
		if self.velocity.y > 0 then
			if self.double_jumping == false then
				play_animation(self, anim_jump) 
			else
				play_animation(self, anim_spin)
			end
		else
			if self.double_jumping == false then
				play_animation(self, anim_fall) 
			else
				play_animation(self, anim_spin)
			end
		end
		if self.ground_near == true then
			play_animation(self, anim_fall)
		end
		if self.wall_contact == true then
			play_animation(self, anim_wall_slide)
		end
	end
end

local function attack(self, type)
	attack_type = type
	play_animation(self, attack_type)
end

function update(self, dt)

	physics.ray_cast(go.get_world_position(), (go.get_world_position() + vmath.vector3(0,-70,0)), {hash("default")}, 1)
	physics.ray_cast(go.get_world_position(), (go.get_world_position() + vmath.vector3(50,0,0)), {hash("default")}, 2)
	physics.ray_cast(go.get_world_position(), (go.get_world_position() + vmath.vector3(-50,0,0)), {hash("default")}, 3)
	
	rendercam.follow(hash(self.go_id))
	-- determine the target speed based on input
	local target_speed = self.move_input * max_speed
	-- calculate the difference between our current speed and the target speed
	local speed_diff = target_speed - self.velocity.x
	-- the complete acceleration to integrate over this frame
	local acceleration = vmath.vector3(0, gravity, 0)
	
	if speed_diff ~= 0 then
		-- set the acceleration to work in the direction of the difference
		if speed_diff < 0 then
			acceleration.x = -move_acceleration
		else
			acceleration.x = move_acceleration
		end
		-- decrease the acceleration when air-borne to give a slower feel
		if not self.ground_contact then
			acceleration.x = air_acceleration_factor * acceleration.x
		end
	end
	-- calculate the velocity change this frame (dv is short for delta-velocity)
	local dv = acceleration * dt
	-- check if dv exceeds the intended speed difference, clamp it in that case
	if math.abs(dv.x) > math.abs(speed_diff) then
		dv.x = speed_diff
	end
	-- save the current velocity for later use
	-- (self.velocity, which right now is the velocity used the previous frame)
	local v0 = self.velocity
	-- calculate the new velocity by adding the velocity change
	self.velocity = self.velocity + dv
	-- calculate the translation this frame by integrating the velocity
	local dp = (v0 + self.velocity) * dt * 0.5
	-- apply it to the player character
	go.set_position(go.get_position() + dp)

	update_animations(self)
	
	-- reset volatile state
	self.correction = vmath.vector3()
	self.move_input = 0
	self.ground_contact = false
	self.wall_contact = false
	self.wall_near = false
	self.ground_near = false
	
end

local function handle_obstacle_contact(self, normal, distance)
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if vmath.dot(normal, vmath.vector3(1,0,0)) == 0 then
		self.ground_contact = true
		self.double_jumping = false
		self.jump = 0
	end
	if vmath.dot(normal, vmath.vector3(0,1,0)) == 0 then
		self.wall_contact = true
		if normal.x > 0 then
			self.dir = -1
		else
			self.dir = 1
		end
	end
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
	end
end

function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == msg_contact_point_response then
		-- check that the object is something we consider an obstacle
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		elseif message.group == group_kill then
			go.delete()
		end
	end

	if message_id == msg_raycast_hit then
		if message.request_id == 1 then
			self.ground_near = true
		end
		
		if message.request_id == 2 then
			if self.ground_contact == false then
				self.wall_near = true
			end
		end
		
		if message.request_id == 3 then
			if self.ground_contact == false then
				self.wall_near = true
			end
		end
	end
end

local function jump(self)
	if self.ground_contact or self.jump == 1 then
		if self.jump == 1 then
			self.double_jumping = true
		end
		if self.double_jumping == true then
			self.velocity.y = jump_takeoff_speed * 0.7
		else
			self.velocity.y = jump_takeoff_speed
		end
		self.jump = self.jump + 1
		play_animation(self, anim_jump)
	end
end

local function wall_jump(self)
	self.velocity.y = wall_jump_takeoff_speed
	self.velocity.x = wall_jump_takeoff_speed * self.dir * -1.2
	self.double_jumping = false
	self.jump = 1
	self.dir = self.dir * -1
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

function on_input(self, action_id, action, dt)
	if action_id == input_left then
			self.move_input = -action.value
			self.dir = -1
	elseif action_id == input_right then
		self.move_input = action.value
		self.dir = 1
	elseif action_id == input_jump then
		if action.pressed then
			if self.wall_contact == true and self.ground_contact == false then
				wall_jump(self)
			else
				jump(self)
			end
		elseif action.released then
			abort_jump(self)
		end
	end
end

function final(self)
	msg.post("/player_spawner", "respawn")
end
/sprites/cat/player.script¬-LJ =/sprites/cat/player.scriptŒ   4G'4 7>:  3 7  :4 7% % >4 7%	 %
  >4 7'  '  '  >: 4 7>: ) : '  : )  : '  : ' : '  : ) : ) : ) : ) : ) : G  ground_nearwall_nearwall_contactwall_jumpingdouble_jumping	jumpdirtouch_jump_timer	animmove_inputground_contactcorrectionvector3
vmathvelocitycat_id/input_handler#inputacquire_input_focus.	postmsgid  get_idgo
go_id



self  5id_table - }   C7   T€4 7% % 3 :>:  G  id  play_animation	#cat	postmsg	animself  anim   ½ I¡M4  7% 7 '    T€) T€) >7   T€7 7	  T€+    + >T1€+    + >T,€7 7'   T€7  T€+    + >T€+    + >T€7  T€+    + >T€+    + >7	  T€+    + >7
  T€+    + >G  ÀÀÀÀÀÀÀwall_contactground_neardouble_jumpingyxvelocityground_contactdir	#catset_hflipsprite 	play_animation anim_idle anim_run anim_jump anim_spin anim_fall anim_wall_slide self  J T  $n5  +    4  >G  Àattack_typeplay_animation self  type   ê 
“´s44  74 7>4 7>4 7'  'ºÿ'  >2 4 % > <  ' >4  74 7>4 7>4 7'2 '  '  >2 4 % > <  ' >4  74 7>4 7>4 7'Îÿ'  '  >2 4 % > <  ' >+  74 7	 > = 7
 +  7 74 7'  + '  > T€'   T€+  :T€+ :7   T€+ 7 : 4 77>4 7 > T€:7 7 : 7  4 74	 7		>			>+ 	  >4 7>: '  :
 ) : ) : ) : ) : G   ÀÀÀÀÀÀground_nearwall_nearwall_contactcorrectionget_positionset_positionabs	mathground_contactxvelocitymove_input
go_idfollowdefault	hashvector3
vmathget_world_positiongoray_castphysics€€À™ €€€ÿ


"$$$&&&&(((((((***----..//0011224rendercam max_speed gravity move_acceleration air_acceleration_factor update_animations self  ”dt  ”target_speed LHspeed_diff Eacceleration ?dv ,v0  dp  —  Hr© 4  77  > 7 : 4 74 7>>4  7 4  7' '	  '
  > =	  T€) : ) : '  :	 4  7 4  7'  '	 '
  > =	  T€) :
 7'   T€'ÿÿ: T€' : 4  77  > '   T€7  : G  velocitydirxwall_contact	jumpdouble_jumpingground_contactvector3get_positionset_positiongocorrectiondot
vmath 							 self  Inormal  Idistance  Iproj Ccomp A Ï 	-²Ë+   T€7 +  T€+   77>T€7 +  T€4 7>+  T€7	  T€) : 7	 T€7  T€) : 7	 T€7  T€) : G  	ÀÀÀÀÀwall_nearground_contactground_nearrequest_iddeletegodistancenormal
groupmsg_contact_point_response group_obstacle handle_obstacle_contact group_kill msg_raycast_hit self  .message_id  .message  .sender  . ” Ré7    T€7 	  T€7 	  T€) : 7  T€7 +  :T€7 +  :7  : +   + >G  ÀÀÀyvelocitydouble_jumping	jumpground_contactÍ™³ææÌ™ÿ


jump_takeoff_speed play_animation anim_jump self   ¶ 1ø7  +  :7  +  7   :) : ' : 7 : G  À	jumpdouble_jumpingdirxyvelocityçÌ™³³æÌÿþÿÿÿwall_jump_takeoff_speed self   [  €7  7'   T€7  7  7 :G  yvelocity€€€ÿself   ”  ,Šˆ+   T€7 :  'ÿÿ: T"€+  T€7:  ' : T€+  T€7  T€7  T€7  T€+   >T
€+   >T€7  T€+   >G  ÀÀÀÀÀ Àreleasedground_contactwall_contactpresseddir
valuemove_input						



input_left input_right input_jump wall_jump jump abort_jump self  -action_id  -action  -dt  - R   œ4  7% % >G  respawn/player_spawner	postmsgself   ÿ	 " $Qµ Ÿ4   % > '°(  ','|ü'þ'^'E)  4	 %
 >	4
 % >
4 % >4 % >4 % >4 % >4 %	 >4 %
 >4 % >4 % >4 % >4 % >4 % >4 % >4 % >4 % >4 % >1 5 1 1 1 1 5 1 1 5 1 1 1  1!  5!! 1!" 5!# 0  €G  
final on_input    on_message  update    	init wall_slidewall_turn
punchspin_fall	fall	idle	walk	jump
right	leftautokilldefaultray_cast_responseray_cast_missedanimation_donecontact_point_response	hashrendercam.rendercamrequireµæÌ™™³¦ÿ     	                                             ! ! ! " " " # # # $ $ $ % % % A ' K l q § s É ç Ë ö þ rendercam Nmove_acceleration Mair_acceleration_factor Lmax_speed Kgravity Jwall_slide_speed Ijump_takeoff_speed Hwall_jump_takeoff_speed Gwall_cooldown Fmsg_contact_point_response Cmsg_animation_done @msg_raycast_miss =msg_raycast_hit :group_obstacle 7group_kill 4input_left 1input_right .input_jump +anim_run (anim_idle %anim_jump "anim_fall anim_spin anim_punch anim_wall_turn anim_wall_slide play_animation update_animations attack handle_obstacle_contact jump wall_jump abort_jump   rendercam.rendercam/rendercam/rendercam.luac" 