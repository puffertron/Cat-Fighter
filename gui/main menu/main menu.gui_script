local monarch = require "monarch.monarch"
local gamestate = require "oyster.gamestate"

local clicking = false
local buttons = {}

local function tablelength(T)
	local count = 0
	for _ in pairs(T) do count = count + 1 end
	return count
end

local function move_buttons(buttons, min_duration, max_duration, easing, add_pos)
	for n in pairs(buttons) do
		duration = (min_duration + ((max_duration - min_duration) / tablelength(buttons)) * n)
		gui.animate(buttons[n], "position", (gui.get_position(buttons[n])+add_pos), easing, duration)
	end
end

local function check_selection(buttons)
	if clicking == true then
		for n in pairs(buttons) do
			x = gui.pick_node(buttons[n], mouse_x, mouse_y)
			if x == true then
				selected = buttons[n]
				print(selected)
				return selected
			end
		end
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	local play_btn = gui.get_node("play_btn")
	local settings_btn = gui.get_node("settings_btn")
	local quit_btn = gui.get_node("quit_btn")

	local buttons = {play_btn, settings_btn, quit_btn}
	move_buttons(buttons, 0.7, 0.4, gui.EASING_OUTCUBIC, vmath.vector3(225,0,0))
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	check_selection(buttons)
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	local mouse_x = action.x
	local mouse_y = action.y
	if action_id == hash("click") then
		clicking = true
		if action.released then
			clicking = false
		end
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
