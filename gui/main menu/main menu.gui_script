local monarch = require "monarch.monarch"
local gamestate = require "oyster.gamestate"

local selected
local clicked
local buttons = {}

local function tablelength(T)
	local count = 0
	for _ in pairs(T) do count = count + 1 end
	return count
end

local function move_buttons(buttons, min_duration, max_duration, easing, add_pos)
	for n in pairs(buttons) do
		duration = (min_duration + ((max_duration - min_duration) / tablelength(buttons)) * n)
		gui.animate(buttons[n], "position", (gui.get_position(buttons[n])+add_pos), easing, duration)
	end
end

local function round_position(buttons)
	for b in pairs(buttons) do
		node = buttons[b]
		pos = gui.get_position(node)
		new_pos = vmath.vector3()
		if pos.x % 8 ~= 0 or pos.y % 8 ~= 0 then
			if pos.x % 8 ~= 0 then
				round = (pos.x % 8)
				x = round
				new_pos.x = x
			end
			if pos.y % 8 ~= 0 then
				round = (pos.y % 8)
				y = round
				new_pos.y = y
			end
			new_pos.z = pos.z
			gui.set_position(node, (pos + new_pos))
		end
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	local play_btn = gui.get_node("play_btn")
	local settings_btn = gui.get_node("settings_btn")
	local quit_btn = gui.get_node("quit_btn")

	buttons = {play_btn, settings_btn, quit_btn}
	move_buttons(buttons, 0.7, 0.4, gui.EASING_OUTCUBIC, vmath.vector3(225,0,0))
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if clicked == buttons[1] then
		gamestate.set("IN_GAME")
	end
	round_position(buttons)
	selected = nil
	clicked = nil
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	local mouse_x = action.x
	local mouse_y = action.y
	for n in pairs(buttons) do
		if gui.pick_node(buttons[n], action.x, action.y) == true then
			selected = buttons[n]
			if action_id == hash("click") then
				clicked = buttons[n]
			end
		end
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
