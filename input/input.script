local maxPlayers = 4
local oyster = require "oyster.oyster"
local gamestate = require "oyster.gamestate"
local playerdata = require "oyster.playerdata"
local stopwatch = require "oyster.stopwatch"

local players = 0
local max_players = 4
local game_inputs = {}
local all_bindings = {
	"a", "b", "x", "y", "r", "l", "r_analog", "l_analog", "start", "back",
	"dpad_left", "dpad_down", "dpad_right", "dpad_up",
	"lstick_click",	"lstick_left", "lstick_down", "lstick_right", "lstick_up",
	"rstick_click",	"rstick_left", "rstick_down", "rstick_right", "rstick_up"
}
for player_number=1, max_players do
	playerdata.add(player_number)
	for i, v in ipairs(all_bindings) do
		playerdata.set(player_number, v, {pressed = false, released = false, value = 0})
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end 

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	
end

function on_input(self, action_id, action)
	for g = 1, 4 do
		for i, v in ipairs(all_bindings) do
			button = all_bindings[i]
			if action_id == hash(button) then
				if action.gamepad == g - 1 then
					playerdata.set(g, button, "pressed")
					if playerdata.get(g, "ingame") == true then
						--nothing
					else
						if gamestate.get() == "IN_GAME" then
							msg.post("/player_spawner#spawner script", "spawn_cat", {player_number = g})
						end
					end
				end
				if action.released then
					playerdata.set(g, button, "released")
				end
			end
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
